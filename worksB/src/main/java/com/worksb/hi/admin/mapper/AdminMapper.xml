<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.worksb.hi.admin.mapper.AdminMapper">
	<select id="downloadList" resultType="FileDataVO">
	     SELECT *
			FROM (
			    SELECT rownum rn, a.*
			    FROM (
				    SELECT 
							d.file_id,
							d.file_name,
							d.file_type,
							d.file_regdate,
							d.converted_size,
							d.member_id,
							m.company_id
					FROM download_file d
					JOIN (
			    		SELECT 
			        		member_id,
			       			company_id
			    		FROM
			        		member
			    		WHERE 
			    			company_id=#{companyId})m 
						ON 
							d.member_id=m.member_id
						ORDER BY d.file_regdate DESC) a ) 
			WHERE rn BETWEEN #{pagingvo.start} AND #{pagingvo.end}
	</select>
<!-- 	downloadlist의 갯수 -->
	<select id="downloadCount" resultType="int">
		  SELECT 
            COUNT(*)
		FROM download_file d
		JOIN (
    		SELECT 
        		member_id,
       			company_id
    		FROM
        		member
    		WHERE company_id=#{companyId}
				)m 
			ON d.member_id=m.member_id
	</select>
	
	
	<select id="prjcount" resultType="int">
		 SELECT COUNT(*)
		 FROM project 
		 WHERE dept_id 
		 IN (SELECT dept_id FROM department WHERE company_id= #{companyId})
	</select>
	
	<select id="projectList" resultType="ProjectVO">
		  SELECT *
			FROM (
			    SELECT rownum rn, a.*
			    FROM (			    
                    SELECT
						p.project_id,
                        (SELECT COUNT(pp.member_id) FROM prj_particir pp where pp.project_id=p.project_id) mnumber,
						project_name, 
						project_access,  
						manager_accp,   
						write_access,   
						update_access,  
						board_access,  
						comment_access, 
						file_access,  
						dept_id,       
						project_cls,
                        particir.member_id,
                        board.boardcount
					FROM
						project p
                    LEFT JOIN(
                        SELECT
                            project_id,
                            member_id,
                            manager
                        FROM
                            prj_particir
                        WHERE
                            manager='A1'
                    )particir
                    ON (particir.project_id=p.project_id)
                    
                    LEFT JOIN(
                        SELECT
                            project_id,
                            COUNT(project_id) boardcount
                        FROM
                            prj_board
                        GROUP BY project_id
                    )board
                    ON(p.project_id=board.project_id)
                    
					WHERE dept_id 
						IN (SELECT dept_id FROM department WHERE company_id= #{companyId})) a ) 
			WHERE rn BETWEEN #{pagingvo.start} AND #{pagingvo.end}
	</select>
	
	<!-- 회사 정보 수정 -->
	<update id="updateCompany" parameterType="CompanyVO">
		UPDATE 	company
	  		<set>
	  			company_name = #{companyName}
	  			, company_url = #{companyUrl}
	  			<if test="logoPath != null">
	  			, logo_path = #{logoPath}
	  			</if>
	  			<if test="realLogoPath != null">
	  			, real_logo_path = #{realLogoPath}
	  			</if> 
	  			, company_addr = #{companyAddr}
  			</set>
  		WHERE company_id = #{companyId}
	</update>
	
	<!-- 회사 구성원 조회 -->
	<select id="companyMemberList" resultType="MemberVO">
		select m.member_id, 
			   m.member_name, 
			   m.member_phone, 
			   m.member_grade, 
			   m.con_ip, 
			   m.job_id, 
			   m.dept_id, 
			   m.emp_status, 
			   m.con_status, 
			   c.company_id, 
			   d.dept_name, 
			   j.job_name
		  from member m left join company c
                        on(m.company_id = c.company_id)
                      join department d
                        on(m.dept_id = d.dept_id)
                      join job j
                        on(m.job_id = j.job_id)
		where m.company_id = #{companyId}
	</select>
	
	<!-- 구성원 단건 조회 -->
	<select id="CompanyMemberInfo" resultType="MemberVO">
		select m.member_id, 
			   m.member_name, 
			   m.member_phone, 
			   m.member_grade, 
			   m.con_ip, 
			   m.job_id, 
			   m.dept_id, 
			   m.emp_status, 
			   m.con_status, 
			   c.company_id, 
			   d.dept_name, 
			   j.job_name
		  from member m left join company c
                        on(m.company_id = c.company_id)
                      join department d
                        on(m.dept_id = d.dept_id)
                      join job j
                        on(m.job_id = j.job_id)
		 where member_id = #{memberId}
	</select>
	
	<!-- 구성원 정보 수정 -->
	<update id="updateMember">
		UPDATE member
			<set>
				member_name = #{memberName}
				, member_phone = #{memberPhone}
				, member_grade = #{memberGrade}
				, job_id = #{jobId}
				, dept_id = #{dept_id}
			</set>
		 WHERE member_id = #{memberId}
	</update>
	
	<!--  -->
	
	
	<select id="departmentList" resultType="DepartmentVO">
		SELECT
		    d.dept_id,
		    d.dept_name,
		    d.company_id,
		    COUNT(p.project_id) AS counting
		FROM
		    department d
		    
		LEFT JOIN
		    project p ON d.dept_id=p.dept_id
		    
		WHERE
		    d.company_id=#{companId}
		GROUP BY
		    d.dept_id,d.dept_name,d.company_id
		ORDER BY
			d.dept_id

	</select>
	
	<select id="jobList"  resultType="JobVO">
		SELECT
			job_id,
			job_name
		FROM
			job
		WHERE
			company_id=#{companId}
		ORDER BY job_id
	</select>
	
	<insert id="insertDept" parameterType="DepartmentVO">
		<selectKey keyProperty="deptId" resultType="int" order="BEFORE">
			SELECT NVL(MAX(dept_id),0)+1
			FROM department
		</selectKey>
		INSERT INTO department
					(
						dept_id,
						dept_name,
						company_id
					)
				VALUES(
						#{deptId},
						#{deptName},
						#{companyId}
				)
		
	</insert>
	
	<select id="getNewestDep" resultType="DepartmentVO">
		SELECT dept_id,dept_name,company_id 
		FROM department
		WHERE dept_id=(SELECT MAX(dept_id) FROM department)
	</select>
	
	<delete id="deleteDept" parameterType="int">
		DELETE department where dept_id=#{deptId}
	</delete>
	
	<insert id="insertRole" parameterType="JobVO">
		<selectKey keyProperty="jobId" resultType="int" order="BEFORE">
			SELECT NVL(MAX(job_id),0)+1
			FROM job
		</selectKey>
		INSERT INTO job
				(
					job_id,
					job_name,
					company_id
				)
			VALUES(
				#{jobId},
				#{jobName},
				#{companyId}
			)
	</insert>
	
	<delete id="deleteRole" parameterType="int">
		DELETE JOB where job_id=#{jobId}
	</delete>
	
	<update id="updateDept" parameterType="departmentVO">
		 UPDATE department SET dept_name=#{deptName} 
		 WHERE dept_id=#{deptId}
	</update>
	
	<update id="updateRole" parameterType="JOBVO">
		UPDATE job set job_name=#{jobName}
		WHERE job_id=#{jobId}
	</update>
	
	<select id="getPrjName" resultType="ProjectVO">
		SELECT project_name 
		FROM project 
		WHERE dept_id=#{deptId}
		ORDER BY project_id
	</select>
	
	<select id="getPrjId"  resultType="ProjectVO">
		SELECT project_id
		FROM project
		WHERE dept_id=#{deptId}
		ORDER BY project_id
	</select>
</mapper>